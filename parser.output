Terminals unused in grammar

    RETURN


State 72 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: block

    2 block: OPEN_BRACKET statement CLOSE_BRACKET

    3 statement: assigment
    4          | block
    5          | print
    6          | if
    7          | while
    8          | var_type SEMI_COLON

    9 relexpression: expression EQUALTO expression
   10              | expression MINOR expression
   11              | expression GREATER expression
   12              | expression

   13 expression: term PLUS term
   14           | term MINUS term
   15           | term OR term
   16           | term CONCATENATE term
   17           | term

   18 term: factor
   19     | factor MULT factor
   20     | factor DIV factor
   21     | factor AND factor

   22 factor: INT
   23       | STRING
   24       | IDENTIFIER
   25       | PLUS factor
   26       | MINUS factor
   27       | NOT factor
   28       | SCANF OPEN_PAR CLOSE_PAR
   29       | OPEN_PAR relexpression CLOSE_PAR

   30 assigment: var_type IDENTIFIER EQUAL relexpression

   31 print: PRINT OPEN_PAR relexpression CLOSE_PAR

   32 if: IF OPEN_PAR relexpression CLOSE_PAR statement else

   33 while: WHILE OPEN_PAR relexpression CLOSE_PAR statement

   34 else: ELSE statement
   35     | %empty

   36 var_type: VAR_TYPE IDENTIFIER
   37         | SEPARATOR IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IDENTIFIER (258) 24 30 36 37
    INT (259) 22
    STRING (260) 23
    EQUAL (261) 30
    EQUALTO (262) 9
    MINOR (263) 10
    GREATER (264) 11
    NOT (265) 27
    AND (266) 21
    OR (267) 15
    OPEN_PAR (268) 28 29 31 32 33
    CLOSE_PAR (269) 28 29 31 32 33
    OPEN_BRACKET (270) 2
    CLOSE_BRACKET (271) 2
    SEMI_COLON (272) 8
    PRINT (273) 31
    SCANF (274) 28
    WHILE (275) 33
    IF (276) 32
    ELSE (277) 34
    VAR_TYPE (278) 36
    RETURN (279)
    CONCATENATE (280) 16
    SEPARATOR (281) 37
    PLUS (282) 13 25
    MINUS (283) 14 26
    MULT (284) 19
    DIV (285) 20


Nonterminals, with rules where they appear

    $accept (31)
        on left: 0
    program (32)
        on left: 1
        on right: 0
    block (33)
        on left: 2
        on right: 1 4
    statement (34)
        on left: 3 4 5 6 7 8
        on right: 2 32 33 34
    relexpression (35)
        on left: 9 10 11 12
        on right: 29 30 31 32 33
    expression (36)
        on left: 13 14 15 16 17
        on right: 9 10 11 12
    term (37)
        on left: 18 19 20 21
        on right: 13 14 15 16 17
    factor (38)
        on left: 22 23 24 25 26 27 28 29
        on right: 18 19 20 21 25 26 27
    assigment (39)
        on left: 30
        on right: 3
    print (40)
        on left: 31
        on right: 5
    if (41)
        on left: 32
        on right: 6
    while (42)
        on left: 33
        on right: 7
    else (43)
        on left: 34 35
        on right: 32
    var_type (44)
        on left: 36 37
        on right: 8 30


State 0

    0 $accept: . program $end

    OPEN_BRACKET  shift, and go to state 1

    program  go to state 2
    block    go to state 3


State 1

    2 block: OPEN_BRACKET . statement CLOSE_BRACKET

    OPEN_BRACKET  shift, and go to state 1
    PRINT         shift, and go to state 4
    WHILE         shift, and go to state 5
    IF            shift, and go to state 6
    VAR_TYPE      shift, and go to state 7
    SEPARATOR     shift, and go to state 8

    block      go to state 9
    statement  go to state 10
    assigment  go to state 11
    print      go to state 12
    if         go to state 13
    while      go to state 14
    var_type   go to state 15


State 2

    0 $accept: program . $end

    $end  shift, and go to state 16


State 3

    1 program: block .

    $default  reduce using rule 1 (program)


State 4

   31 print: PRINT . OPEN_PAR relexpression CLOSE_PAR

    OPEN_PAR  shift, and go to state 17


State 5

   33 while: WHILE . OPEN_PAR relexpression CLOSE_PAR statement

    OPEN_PAR  shift, and go to state 18


State 6

   32 if: IF . OPEN_PAR relexpression CLOSE_PAR statement else

    OPEN_PAR  shift, and go to state 19


State 7

   36 var_type: VAR_TYPE . IDENTIFIER

    IDENTIFIER  shift, and go to state 20


State 8

   37 var_type: SEPARATOR . IDENTIFIER

    IDENTIFIER  shift, and go to state 21


State 9

    4 statement: block .

    $default  reduce using rule 4 (statement)


State 10

    2 block: OPEN_BRACKET statement . CLOSE_BRACKET

    CLOSE_BRACKET  shift, and go to state 22


State 11

    3 statement: assigment .

    $default  reduce using rule 3 (statement)


State 12

    5 statement: print .

    $default  reduce using rule 5 (statement)


State 13

    6 statement: if .

    $default  reduce using rule 6 (statement)


State 14

    7 statement: while .

    $default  reduce using rule 7 (statement)


State 15

    8 statement: var_type . SEMI_COLON
   30 assigment: var_type . IDENTIFIER EQUAL relexpression

    IDENTIFIER  shift, and go to state 23
    SEMI_COLON  shift, and go to state 24


State 16

    0 $accept: program $end .

    $default  accept


State 17

   31 print: PRINT OPEN_PAR . relexpression CLOSE_PAR

    IDENTIFIER  shift, and go to state 25
    INT         shift, and go to state 26
    STRING      shift, and go to state 27
    NOT         shift, and go to state 28
    OPEN_PAR    shift, and go to state 29
    SCANF       shift, and go to state 30
    PLUS        shift, and go to state 31
    MINUS       shift, and go to state 32

    relexpression  go to state 33
    expression     go to state 34
    term           go to state 35
    factor         go to state 36


State 18

   33 while: WHILE OPEN_PAR . relexpression CLOSE_PAR statement

    IDENTIFIER  shift, and go to state 25
    INT         shift, and go to state 26
    STRING      shift, and go to state 27
    NOT         shift, and go to state 28
    OPEN_PAR    shift, and go to state 29
    SCANF       shift, and go to state 30
    PLUS        shift, and go to state 31
    MINUS       shift, and go to state 32

    relexpression  go to state 37
    expression     go to state 34
    term           go to state 35
    factor         go to state 36


State 19

   32 if: IF OPEN_PAR . relexpression CLOSE_PAR statement else

    IDENTIFIER  shift, and go to state 25
    INT         shift, and go to state 26
    STRING      shift, and go to state 27
    NOT         shift, and go to state 28
    OPEN_PAR    shift, and go to state 29
    SCANF       shift, and go to state 30
    PLUS        shift, and go to state 31
    MINUS       shift, and go to state 32

    relexpression  go to state 38
    expression     go to state 34
    term           go to state 35
    factor         go to state 36


State 20

   36 var_type: VAR_TYPE IDENTIFIER .

    $default  reduce using rule 36 (var_type)


State 21

   37 var_type: SEPARATOR IDENTIFIER .

    $default  reduce using rule 37 (var_type)


State 22

    2 block: OPEN_BRACKET statement CLOSE_BRACKET .

    $default  reduce using rule 2 (block)


State 23

   30 assigment: var_type IDENTIFIER . EQUAL relexpression

    EQUAL  shift, and go to state 39


State 24

    8 statement: var_type SEMI_COLON .

    $default  reduce using rule 8 (statement)


State 25

   24 factor: IDENTIFIER .

    $default  reduce using rule 24 (factor)


State 26

   22 factor: INT .

    $default  reduce using rule 22 (factor)


State 27

   23 factor: STRING .

    $default  reduce using rule 23 (factor)


State 28

   27 factor: NOT . factor

    IDENTIFIER  shift, and go to state 25
    INT         shift, and go to state 26
    STRING      shift, and go to state 27
    NOT         shift, and go to state 28
    OPEN_PAR    shift, and go to state 29
    SCANF       shift, and go to state 30
    PLUS        shift, and go to state 31
    MINUS       shift, and go to state 32

    factor  go to state 40


State 29

   29 factor: OPEN_PAR . relexpression CLOSE_PAR

    IDENTIFIER  shift, and go to state 25
    INT         shift, and go to state 26
    STRING      shift, and go to state 27
    NOT         shift, and go to state 28
    OPEN_PAR    shift, and go to state 29
    SCANF       shift, and go to state 30
    PLUS        shift, and go to state 31
    MINUS       shift, and go to state 32

    relexpression  go to state 41
    expression     go to state 34
    term           go to state 35
    factor         go to state 36


State 30

   28 factor: SCANF . OPEN_PAR CLOSE_PAR

    OPEN_PAR  shift, and go to state 42


State 31

   25 factor: PLUS . factor

    IDENTIFIER  shift, and go to state 25
    INT         shift, and go to state 26
    STRING      shift, and go to state 27
    NOT         shift, and go to state 28
    OPEN_PAR    shift, and go to state 29
    SCANF       shift, and go to state 30
    PLUS        shift, and go to state 31
    MINUS       shift, and go to state 32

    factor  go to state 43


State 32

   26 factor: MINUS . factor

    IDENTIFIER  shift, and go to state 25
    INT         shift, and go to state 26
    STRING      shift, and go to state 27
    NOT         shift, and go to state 28
    OPEN_PAR    shift, and go to state 29
    SCANF       shift, and go to state 30
    PLUS        shift, and go to state 31
    MINUS       shift, and go to state 32

    factor  go to state 44


State 33

   31 print: PRINT OPEN_PAR relexpression . CLOSE_PAR

    CLOSE_PAR  shift, and go to state 45


State 34

    9 relexpression: expression . EQUALTO expression
   10              | expression . MINOR expression
   11              | expression . GREATER expression
   12              | expression .

    EQUALTO  shift, and go to state 46
    MINOR    shift, and go to state 47
    GREATER  shift, and go to state 48

    $default  reduce using rule 12 (relexpression)


State 35

   13 expression: term . PLUS term
   14           | term . MINUS term
   15           | term . OR term
   16           | term . CONCATENATE term
   17           | term .

    OR           shift, and go to state 49
    CONCATENATE  shift, and go to state 50
    PLUS         shift, and go to state 51
    MINUS        shift, and go to state 52

    $default  reduce using rule 17 (expression)


State 36

   18 term: factor .
   19     | factor . MULT factor
   20     | factor . DIV factor
   21     | factor . AND factor

    AND   shift, and go to state 53
    MULT  shift, and go to state 54
    DIV   shift, and go to state 55

    $default  reduce using rule 18 (term)


State 37

   33 while: WHILE OPEN_PAR relexpression . CLOSE_PAR statement

    CLOSE_PAR  shift, and go to state 56


State 38

   32 if: IF OPEN_PAR relexpression . CLOSE_PAR statement else

    CLOSE_PAR  shift, and go to state 57


State 39

   30 assigment: var_type IDENTIFIER EQUAL . relexpression

    IDENTIFIER  shift, and go to state 25
    INT         shift, and go to state 26
    STRING      shift, and go to state 27
    NOT         shift, and go to state 28
    OPEN_PAR    shift, and go to state 29
    SCANF       shift, and go to state 30
    PLUS        shift, and go to state 31
    MINUS       shift, and go to state 32

    relexpression  go to state 58
    expression     go to state 34
    term           go to state 35
    factor         go to state 36


State 40

   27 factor: NOT factor .

    $default  reduce using rule 27 (factor)


State 41

   29 factor: OPEN_PAR relexpression . CLOSE_PAR

    CLOSE_PAR  shift, and go to state 59


State 42

   28 factor: SCANF OPEN_PAR . CLOSE_PAR

    CLOSE_PAR  shift, and go to state 60


State 43

   25 factor: PLUS factor .

    $default  reduce using rule 25 (factor)


State 44

   26 factor: MINUS factor .

    $default  reduce using rule 26 (factor)


State 45

   31 print: PRINT OPEN_PAR relexpression CLOSE_PAR .

    $default  reduce using rule 31 (print)


State 46

    9 relexpression: expression EQUALTO . expression

    IDENTIFIER  shift, and go to state 25
    INT         shift, and go to state 26
    STRING      shift, and go to state 27
    NOT         shift, and go to state 28
    OPEN_PAR    shift, and go to state 29
    SCANF       shift, and go to state 30
    PLUS        shift, and go to state 31
    MINUS       shift, and go to state 32

    expression  go to state 61
    term        go to state 35
    factor      go to state 36


State 47

   10 relexpression: expression MINOR . expression

    IDENTIFIER  shift, and go to state 25
    INT         shift, and go to state 26
    STRING      shift, and go to state 27
    NOT         shift, and go to state 28
    OPEN_PAR    shift, and go to state 29
    SCANF       shift, and go to state 30
    PLUS        shift, and go to state 31
    MINUS       shift, and go to state 32

    expression  go to state 62
    term        go to state 35
    factor      go to state 36


State 48

   11 relexpression: expression GREATER . expression

    IDENTIFIER  shift, and go to state 25
    INT         shift, and go to state 26
    STRING      shift, and go to state 27
    NOT         shift, and go to state 28
    OPEN_PAR    shift, and go to state 29
    SCANF       shift, and go to state 30
    PLUS        shift, and go to state 31
    MINUS       shift, and go to state 32

    expression  go to state 63
    term        go to state 35
    factor      go to state 36


State 49

   15 expression: term OR . term

    IDENTIFIER  shift, and go to state 25
    INT         shift, and go to state 26
    STRING      shift, and go to state 27
    NOT         shift, and go to state 28
    OPEN_PAR    shift, and go to state 29
    SCANF       shift, and go to state 30
    PLUS        shift, and go to state 31
    MINUS       shift, and go to state 32

    term    go to state 64
    factor  go to state 36


State 50

   16 expression: term CONCATENATE . term

    IDENTIFIER  shift, and go to state 25
    INT         shift, and go to state 26
    STRING      shift, and go to state 27
    NOT         shift, and go to state 28
    OPEN_PAR    shift, and go to state 29
    SCANF       shift, and go to state 30
    PLUS        shift, and go to state 31
    MINUS       shift, and go to state 32

    term    go to state 65
    factor  go to state 36


State 51

   13 expression: term PLUS . term

    IDENTIFIER  shift, and go to state 25
    INT         shift, and go to state 26
    STRING      shift, and go to state 27
    NOT         shift, and go to state 28
    OPEN_PAR    shift, and go to state 29
    SCANF       shift, and go to state 30
    PLUS        shift, and go to state 31
    MINUS       shift, and go to state 32

    term    go to state 66
    factor  go to state 36


State 52

   14 expression: term MINUS . term

    IDENTIFIER  shift, and go to state 25
    INT         shift, and go to state 26
    STRING      shift, and go to state 27
    NOT         shift, and go to state 28
    OPEN_PAR    shift, and go to state 29
    SCANF       shift, and go to state 30
    PLUS        shift, and go to state 31
    MINUS       shift, and go to state 32

    term    go to state 67
    factor  go to state 36


State 53

   21 term: factor AND . factor

    IDENTIFIER  shift, and go to state 25
    INT         shift, and go to state 26
    STRING      shift, and go to state 27
    NOT         shift, and go to state 28
    OPEN_PAR    shift, and go to state 29
    SCANF       shift, and go to state 30
    PLUS        shift, and go to state 31
    MINUS       shift, and go to state 32

    factor  go to state 68


State 54

   19 term: factor MULT . factor

    IDENTIFIER  shift, and go to state 25
    INT         shift, and go to state 26
    STRING      shift, and go to state 27
    NOT         shift, and go to state 28
    OPEN_PAR    shift, and go to state 29
    SCANF       shift, and go to state 30
    PLUS        shift, and go to state 31
    MINUS       shift, and go to state 32

    factor  go to state 69


State 55

   20 term: factor DIV . factor

    IDENTIFIER  shift, and go to state 25
    INT         shift, and go to state 26
    STRING      shift, and go to state 27
    NOT         shift, and go to state 28
    OPEN_PAR    shift, and go to state 29
    SCANF       shift, and go to state 30
    PLUS        shift, and go to state 31
    MINUS       shift, and go to state 32

    factor  go to state 70


State 56

   33 while: WHILE OPEN_PAR relexpression CLOSE_PAR . statement

    OPEN_BRACKET  shift, and go to state 1
    PRINT         shift, and go to state 4
    WHILE         shift, and go to state 5
    IF            shift, and go to state 6
    VAR_TYPE      shift, and go to state 7
    SEPARATOR     shift, and go to state 8

    block      go to state 9
    statement  go to state 71
    assigment  go to state 11
    print      go to state 12
    if         go to state 13
    while      go to state 14
    var_type   go to state 15


State 57

   32 if: IF OPEN_PAR relexpression CLOSE_PAR . statement else

    OPEN_BRACKET  shift, and go to state 1
    PRINT         shift, and go to state 4
    WHILE         shift, and go to state 5
    IF            shift, and go to state 6
    VAR_TYPE      shift, and go to state 7
    SEPARATOR     shift, and go to state 8

    block      go to state 9
    statement  go to state 72
    assigment  go to state 11
    print      go to state 12
    if         go to state 13
    while      go to state 14
    var_type   go to state 15


State 58

   30 assigment: var_type IDENTIFIER EQUAL relexpression .

    $default  reduce using rule 30 (assigment)


State 59

   29 factor: OPEN_PAR relexpression CLOSE_PAR .

    $default  reduce using rule 29 (factor)


State 60

   28 factor: SCANF OPEN_PAR CLOSE_PAR .

    $default  reduce using rule 28 (factor)


State 61

    9 relexpression: expression EQUALTO expression .

    $default  reduce using rule 9 (relexpression)


State 62

   10 relexpression: expression MINOR expression .

    $default  reduce using rule 10 (relexpression)


State 63

   11 relexpression: expression GREATER expression .

    $default  reduce using rule 11 (relexpression)


State 64

   15 expression: term OR term .

    $default  reduce using rule 15 (expression)


State 65

   16 expression: term CONCATENATE term .

    $default  reduce using rule 16 (expression)


State 66

   13 expression: term PLUS term .

    $default  reduce using rule 13 (expression)


State 67

   14 expression: term MINUS term .

    $default  reduce using rule 14 (expression)


State 68

   21 term: factor AND factor .

    $default  reduce using rule 21 (term)


State 69

   19 term: factor MULT factor .

    $default  reduce using rule 19 (term)


State 70

   20 term: factor DIV factor .

    $default  reduce using rule 20 (term)


State 71

   33 while: WHILE OPEN_PAR relexpression CLOSE_PAR statement .

    $default  reduce using rule 33 (while)


State 72

   32 if: IF OPEN_PAR relexpression CLOSE_PAR statement . else

    ELSE  shift, and go to state 73

    ELSE      [reduce using rule 35 (else)]
    $default  reduce using rule 35 (else)

    else  go to state 74


State 73

   34 else: ELSE . statement

    OPEN_BRACKET  shift, and go to state 1
    PRINT         shift, and go to state 4
    WHILE         shift, and go to state 5
    IF            shift, and go to state 6
    VAR_TYPE      shift, and go to state 7
    SEPARATOR     shift, and go to state 8

    block      go to state 9
    statement  go to state 75
    assigment  go to state 11
    print      go to state 12
    if         go to state 13
    while      go to state 14
    var_type   go to state 15


State 74

   32 if: IF OPEN_PAR relexpression CLOSE_PAR statement else .

    $default  reduce using rule 32 (if)


State 75

   34 else: ELSE statement .

    $default  reduce using rule 34 (else)
